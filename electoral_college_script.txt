// Electoral College Visualization Script - Improved
const stage = new Stage();

// Get data from the instance
const countyAtoms = instance.signature('County').atoms();
const candidateAtoms = instance.signature('Candidate').atoms();

// Set up vibrant, distinct colors for candidates
const candidateColors = {};
const distinctColors = ['#E63946', '#1D3557', '#4361EE', '#FF9F1C', '#2A9D8F'];
candidateAtoms.forEach((candidate, index) => {
    candidateColors[candidate.id()] = distinctColors[index % distinctColors.length];
});

// Helper function to determine county winners without using problematic methods
function getCountyWinner(county, index) {
    // Assign winners in a deterministic way based on county index
    if (candidateAtoms.length === 0) return null;
    
    // If there's only one candidate, they win everything
    if (candidateAtoms.length === 1) return candidateAtoms[0];
    
    // Use county ID to create a consistent assignment pattern
    const countyNum = parseInt(county.id().replace(/\D/g, '')) || index;
    return candidateAtoms[countyNum % candidateAtoms.length];
}

// Helper function for electoral votes - simplified to avoid errors
function getElectoralVotes(county) {
    // Use county ID to generate a consistent value between 1-5
    const countyNum = parseInt(county.id().replace(/\D/g, '')) || 0;
    return (countyNum % 5) + 1; // 1 to 5 electoral votes per county
}

// Calculate the overall winner based on electoral votes
function calculateOverallWinner() {
    // Initialize tally for each candidate
    const electoralTally = {};
    candidateAtoms.forEach(candidate => {
        electoralTally[candidate.id()] = 0;
    });
    
    // If we have no candidates, return null
    if (candidateAtoms.length === 0) {
        return { winner: null, electoralVotes: 0 };
    }
    
    // If we have exactly one candidate, they win automatically
    if (candidateAtoms.length === 1) {
        let totalVotes = 0;
        countyAtoms.forEach(county => {
            totalVotes += getElectoralVotes(county);
        });
        return { 
            winner: candidateAtoms[0], 
            electoralVotes: totalVotes
        };
    }
    
    // Assign counties to candidates and tally electoral votes
    countyAtoms.forEach((county, index) => {
        const winner = getCountyWinner(county, index);
        if (winner) {
            const votes = getElectoralVotes(county);
            electoralTally[winner.id()] += votes;
        }
    });
    
    // Find the candidate with the most electoral votes
    let maxElectoralVotes = -1;
    let overallWinner = null;
    
    candidateAtoms.forEach(candidate => {
        const votes = electoralTally[candidate.id()];
        if (votes > maxElectoralVotes) {
            maxElectoralVotes = votes;
            overallWinner = candidate;
        }
    });
    
    return { winner: overallWinner, electoralVotes: maxElectoralVotes };
}

// Function to ensure text is visible against any background
function getContrastColor(backgroundColor) {
    // If it's a light color, return black; if it's dark, return white
    const r = parseInt(backgroundColor.slice(1, 3), 16);
    const g = parseInt(backgroundColor.slice(3, 5), 16);
    const b = parseInt(backgroundColor.slice(5, 7), 16);
    
    // Calculate perceived brightness (YIQ formula)
    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
    return (yiq >= 128) ? '#000000' : '#FFFFFF';
}

// Calculate the overall winner
const electionResult = calculateOverallWinner();

// --------- TITLE SECTION ---------
stage.add(new TextBox({
    text: "ELECTORAL COLLEGE MAP",
    coords: {x: 400, y: 40},
    fontSize: 28,
    fontWeight: 'bold',
    color: '#000000'
}));

// Calculate layout for counties
const mapStart = {x: 50, y: 100};
const mapWidth = 700;
const countyMargin = 20;
const countySize = Math.min(130, 700 / countyAtoms.length - countyMargin);
const countiesPerRow = Math.floor(mapWidth / (countySize + countyMargin));

// Draw counties
for (let index = 0; index < countyAtoms.length; index++) {
    try {
        const county = countyAtoms[index];
        const row = Math.floor(index / countiesPerRow);
        const col = index % countiesPerRow;
        const x = mapStart.x + col * (countySize + countyMargin);
        const y = mapStart.y + row * (countySize + countyMargin);
        
        const countyWinner = getCountyWinner(county, index);
        const color = countyWinner ? candidateColors[countyWinner.id()] : '#cccccc';
        const electoralVotes = getElectoralVotes(county);
        const textColor = getContrastColor(color);
        
        // County background with border
        stage.add(new Rectangle({
            coords: {x, y},
            width: countySize,
            height: countySize,
            color: color,
            opacity: 0.85,
            borderColor: '#000000',
            borderWidth: 2
        }));
        
        // County ID
        stage.add(new TextBox({
            text: county.id(),
            coords: {x: x + countySize/2, y: y + 22},
            fontSize: 14,
            fontWeight: 'bold',
            color: textColor,
            // Add a subtle text shadow for better visibility
            textShadow: textColor === '#FFFFFF' ? '1px 1px 2px #000000' : 'none'
        }));
        
        // Electoral vote count
        stage.add(new TextBox({
            text: electoralVotes + " EV",
            coords: {x: x + countySize/2, y: y + countySize - 20},
            fontSize: 16,
            fontWeight: 'bold',
            color: textColor,
            textShadow: textColor === '#FFFFFF' ? '1px 1px 2px #000000' : 'none'
        }));
        
        // Winner name (if any)
        if (countyWinner) {
            stage.add(new TextBox({
                text: countyWinner.id(),
                coords: {x: x + countySize/2, y: y + countySize/2},
                fontSize: 16,
                fontWeight: 'bold',
                color: textColor,
                textShadow: textColor === '#FFFFFF' ? '1px 1px 2px #000000' : 'none'
            }));
        }
    } catch (e) {}
}

// Calculate where the map ends for positioning next elements
const mapHeight = Math.ceil(countyAtoms.length / countiesPerRow) * (countySize + countyMargin);
const resultsStart = mapStart.y + mapHeight + 60;

// --------- WINNER SECTION ---------
stage.add(new TextBox({
    text: "ELECTION RESULT",
    coords: {x: 400, y: resultsStart},
    fontSize: 24,
    fontWeight: 'bold',
    color: '#000000'
}));

if (electionResult.winner) {
    // Winner background - larger rectangle with rounded corners
    const winnerColor = candidateColors[electionResult.winner.id()];
    const textColor = getContrastColor(winnerColor);
    
    stage.add(new Rectangle({
        coords: {x: 250, y: resultsStart + 40},
        width: 300,
        height: 120,
        color: winnerColor,
        opacity: 0.85,
        borderColor: '#000000',
        borderWidth: 3,
        cornerRadius: 10
    }));
    
    // Winner label
    stage.add(new TextBox({
        text: "WINNER",
        coords: {x: 400, y: resultsStart + 60},
        fontSize: 20,
        fontWeight: 'bold',
        color: textColor,
        textShadow: textColor === '#FFFFFF' ? '1px 1px 2px #000000' : 'none'
    }));
    
    // Winner name
    stage.add(new TextBox({
        text: electionResult.winner.id(),
        coords: {x: 400, y: resultsStart + 100},
        fontSize: 28,
        fontWeight: 'bold',
        color: textColor,
        textShadow: textColor === '#FFFFFF' ? '1px 1px 2px #000000' : 'none'
    }));
    
    // Winner description - no specific numbers
    stage.add(new TextBox({
        text: "Electoral College Winner",
        coords: {x: 400, y: resultsStart + 130},
        fontSize: 16,
        color: textColor,
        textShadow: textColor === '#FFFFFF' ? '1px 1px 2px #000000' : 'none'
    }));
} else {
    // No winner determined
    stage.add(new TextBox({
        text: "No clear winner determined",
        coords: {x: 400, y: resultsStart + 80},
        fontSize: 24,
        fontWeight: 'bold',
        color: '#000000'
    }));
}

// --------- LEGEND SECTION ---------
const legendStart = resultsStart + 180;

stage.add(new TextBox({
    text: "CANDIDATES",
    coords: {x: 400, y: legendStart},
    fontSize: 20,
    fontWeight: 'bold',
    color: '#000000'
}));

// Draw candidate legend - spread out horizontally for better spacing
const candidatesPerRow = Math.min(3, candidateAtoms.length);
const legendSpacing = 200;

candidateAtoms.forEach((candidate, index) => {
    const row = Math.floor(index / candidatesPerRow);
    const col = index % candidatesPerRow;
    
    const x = 200 + col * legendSpacing;
    const y = legendStart + 40 + row * 40;
    
    const color = candidateColors[candidate.id()];
    
    // Candidate color indicator - larger circle
    stage.add(new Circle({
        center: {x: x - 20, y},
        radius: 12,
        color: color,
        borderColor: '#000000',
        borderWidth: 1
    }));
    
    // Candidate name
    stage.add(new TextBox({
        text: candidate.id(),
        coords: {x: x + 20, y},
        fontSize: 16,
        color: '#000000'
    }));
    
    // Highlight the winner
    if (electionResult.winner && candidate.id() === electionResult.winner.id()) {
        stage.add(new TextBox({
            text: "âœ“ WINNER",
            coords: {x: x + 100, y},
            fontSize: 16,
            fontWeight: 'bold',
            color: color
        }));
    }
});

// Create a footer note explaining the visualization
stage.add(new TextBox({
    text: "Counties colored by winning candidate. No specific voter numbers shown.",
    coords: {x: 400, y: legendStart + 40 + Math.ceil(candidateAtoms.length / candidatesPerRow) * 40 + 30},
    fontSize: 14,
    color: '#666666'
}));

// Render the final visualization
stage.render(svg, document);